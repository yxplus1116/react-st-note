function UseMemoComponents() {
  return (
    <div>
      <h1>usememo</h1>
      <pre>
        <h3>什么是 React.memo？</h3>
        - React.memo 是一个高阶组件（HOC），它可以包裹一个函数组件，并对其进行优化。具体来说，它会对组件的 props 进行浅层比较，如果 props 没有变化，组件就不会重新渲染。
        <h3>为什么使用 React.memo？</h3>
        - 在 React 中，当父组件重新渲染时，所有的子组件默认也会重新渲染，即使这些子组件的 props 没有变化。这可能会导致不必要的性能开销。React.memo 的作用是避免这种不必要的重新渲染，从而提高应用的性能。
        <h3> useMemo是来解决什么问题的？</h3>
        - useMemo的目的是“减少组件重新渲染时不必要的函数计算”。<br />
        - useMemo可以将某些函数的计算结果(返回值)挂载到react底层原型链上，并返回该函数返回值的索引。当组件重新渲染时，如果useMemo依赖的数据变量未发生变化，那么直接使用原型链上保存的该函数计算结果，跳过本次无意义的重新计算，达到提高组件性能的目的。
        <h3>useCallback 和 useMemo 有什么区别？</h3>
        - useCallback是将某个函数“放入到react底层原型链上，并返回该函数的索引”，而useMemo是将某个函数返回值“放入到react底层原型链上，并返回该返回值的索引”。一个是针对函数，一个是针对函数返回值。
        <h4>
          useCallback 是一个 React Hook，用于缓存函数，使其在依赖项没有变化时不会重新创建。它返回一个记忆的回调函数，这个回调函数只有在其依赖项发生变化时才会更新。
        </h4>
        <p>- 用于优化回调函数，使其在依赖项没有变化时不会重新创建。</p>
        <p>- 避免因函数重新创建而导致的子组件重新渲染。</p>
        <h4>
          React.memo 是一个高阶组件（HOC），用于优化函数组件。它通过对比组件的 props 来决定是否需要重新渲染组件。如果 props 没有变化，组件就不会重新渲染。
        </h4>
        <p>- 用于优化纯函数组件，使其在 props 没有变化时不重新渲染。</p>
        <p>- 避免父组件重新渲染时不必要的子组件重新渲染。</p>
      </pre>
    </div>
  )
}
export default UseMemoComponents